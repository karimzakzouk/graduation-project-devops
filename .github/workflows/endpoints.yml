name: Print Service Endpoints
on:
  workflow_dispatch:
  workflow_call:
    inputs:
      cluster_name:
        description: 'EKS Cluster Name'
        required: true
        type: string
      app_namespace:
        description: 'Kubernetes Namespace for the Application'
        required: true
        type: string
      monitoring_namespace:
        description: 'Kubernetes Namespace for Monitoring'
        required: true
        type: string
      argocd_namespace:
        description: 'Kubernetes Namespace for ArgoCD'
        required: true
        type: string
      app_name:
        description: 'Name of the Application'
        required: true
        type: string
      image_tag:
        description: 'Docker image tag to deploy'
        required: false
        default: ''
        type: string

jobs:
  print-endpoints:
    name: Print Service Endpoints
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsInfraRole
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ inputs.cluster_name }} --region us-east-1

      - name: Print Service Endpoints
        run: |
          echo "================= SERVICE ENDPOINTS ================="
          
          # Get ArgoCD and App LoadBalancer services
          ARGOCD_HOST=$(kubectl get svc argocd-server -n ${{ inputs.argocd_namespace }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo 'Not found')
          APP_HOST=$(kubectl get svc ${{ inputs.app_name }}-svc -n ${{ inputs.app_namespace }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo 'Not found')
          
          # Get monitoring ingress information
          MONITORING_DOMAIN=$(kubectl get ingress -n ${{ inputs.monitoring_namespace }} -o jsonpath='{.items[0].spec.rules[0].host}' 2>/dev/null || echo 'Not found')
          INGRESS_IP=$(kubectl get ingress -n ${{ inputs.monitoring_namespace }} -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}' 2>/dev/null)
          INGRESS_HOSTNAME=$(kubectl get ingress -n ${{ inputs.monitoring_namespace }} -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}' 2>/dev/null)
          
          # Get NGINX ingress controller LoadBalancer
          NGINX_LB=$(kubectl get svc -n ingress-nginx ingress-nginx-controller -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo 'Not found')
          
          # Print endpoints
          echo "üöÄ ArgoCD: http://$ARGOCD_HOST"
          echo "üåü App: http://$APP_HOST"
          echo ""
          echo "üìä Monitoring Services (via Ingress):"
          if [ "$MONITORING_DOMAIN" != "Not found" ]; then
            echo "   Domain: $MONITORING_DOMAIN"
            echo "   üìä Prometheus: http://$MONITORING_DOMAIN/prometheus"
            echo "   üìà Grafana: http://$MONITORING_DOMAIN/grafana" 
            echo "   üö® Alertmanager: http://$MONITORING_DOMAIN/alertmanager"
            echo ""
            echo "   Ingress Status:"
            if [ ! -z "$INGRESS_IP" ]; then
              echo "   IP: $INGRESS_IP"
            fi
            if [ ! -z "$INGRESS_HOSTNAME" ]; then
              echo "   LoadBalancer: $INGRESS_HOSTNAME"
            fi
          else
            echo "   ‚ö†Ô∏è  Ingress not found or not ready"
          fi
          echo ""
          echo "üåê NGINX Ingress Controller: $NGINX_LB"
          
          echo ""
          echo "================= DETAILED INGRESS STATUS ================="
          echo "All Ingress Resources:"
          kubectl get ingress -A -o wide 2>/dev/null || echo "No ingress resources found"
          echo ""
          echo "Monitoring Namespace Ingress Details:"
          kubectl describe ingress -n ${{ inputs.monitoring_namespace }} 2>/dev/null || echo "No ingress in monitoring namespace"
          
          echo ""
          echo "================= SERVICE STATUS ================="
          echo "Monitoring Services (should be ClusterIP):"
          kubectl get svc -n ${{ inputs.monitoring_namespace }} -l app.kubernetes.io/instance=kube-prometheus-stack
          
          echo ""
          echo "All LoadBalancer Services:"
          kubectl get svc -A --field-selector spec.type=LoadBalancer -o wide
          
          echo ""
          echo "NGINX Ingress Controller Status:"
          kubectl get svc -n ingress-nginx -o wide 2>/dev/null || echo "NGINX Ingress Controller not found"
          
          echo ""
          echo "================= DEFAULT CREDENTIALS ================="
          ARGOCD_PASS=$(kubectl -n ${{ inputs.argocd_namespace }} get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' 2>/dev/null | base64 -d || echo 'Not found')
          echo "ArgoCD -> Username: admin"
          echo "ArgoCD -> Password: $ARGOCD_PASS"
          echo "Grafana -> Username: admin"
          echo "Grafana -> Password: ${{ secrets.GRAFANA_PASSWORD }}"
          echo "Prometheus -> No login needed (anonymous access by default)"
          
          echo ""
          echo "================= TROUBLESHOOTING TIPS ================="
          LB_COUNT=$(kubectl get svc -A --field-selector spec.type=LoadBalancer --no-headers 2>/dev/null | wc -l)
          INGRESS_COUNT=$(kubectl get ingress -A --no-headers 2>/dev/null | wc -l)
          
          echo "üìä Current LoadBalancers: $LB_COUNT"
          echo "üìä Current Ingress Resources: $INGRESS_COUNT"
          echo ""
          echo "üîç If monitoring services aren't accessible:"
          echo "   1. Check if NGINX Ingress Controller is installed"
          echo "   2. Verify domain 'monitoring.yourdomain.com' points to NGINX LB"
          echo "   3. Check ingress resource was created successfully"
          echo "   4. Ensure kube-prometheus-stack synced without errors in ArgoCD"
          echo ""
          echo "üí∞ Cost Impact:"
          echo "   ‚Ä¢ Target: 2 LoadBalancers (ArgoCD + NGINX Ingress)"
          echo "   ‚Ä¢ Current: $LB_COUNT LoadBalancers"
          if [ "$LB_COUNT" -gt 2 ]; then
            EXCESS=$((LB_COUNT - 2))
            COST=$((EXCESS * 16))
            echo "   ‚Ä¢ Potential monthly savings: ~\$COST (reducing $EXCESS extra LoadBalancers)"
          fi